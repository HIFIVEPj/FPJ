<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="fp.member.mapper.MemberMapper">
	
	 <resultMap id="MemberMap" type="Member">	 	
	 	<id property="email" column="MEM_EMAIL"/>
	 	<result property="name" column="MEM_NAME"/>		
		<result property="pwd" column="MEM_PWD"/>
		<result property="class_num" column="CLASS_NUM"/>
		<result property="status" column="MEM_STATUS"/>
		<result property="rdate" column="MEM_RDATE"/>
		<result property="option1" column="OPTION1"/>
		<result property="option2" column="OPTION2"/>
		<result property="option3" column="OPTION3"/>	
		
	</resultMap>
	<select id = "idCheck" parameterType = "String" resultType = "int">
    	SELECT COUNT(*) FROM MEMBER WHERE MEM_EMAIL = #{email}
	</select>
	
	<select id="loginCheck" resultType="Member" resultMap="MemberMap">
		<![CDATA[
			SELECT * FROM member WHERE MEM_EMAIL = #{email} 
		]]>
	</select>
	<!--  시큐리티 적용해보기 
	<select id="selectMemList" resultMap="MemberMap" resultType="Member"  parameterType="String">
  		SELECT m.*, a.MEM_AUTH FROM MEMBER m LEFT OUTER JOIN MEMBER_AUTH a on m.MEM_EMAIL=a.MEM_EMAIL WHERE m.MEM_EMAIL= #{email} 
	</select>-->	
	
	<insert id="insertMem" parameterType="Member">
		insert into MEMBER(MEM_EMAIL, MEM_NAME, MEM_PWD, CLASS_NUM, MEM_RDATE) values(#{email},#{name}, #{pwd}, #{class_num} ,SYSDATE)
	</insert>

	
	<update id="update_pw"  parameterType="Member">
		UPDATE MEMBER SET MEM_PWD=#{pwd} WHERE MEM_EMAIL=#{email} 
	</update>
	
	<!-- 관리자 매출합계 -->
	<select id="sumFree" resultType="Long" >
		select SUM(payinfo_price)from pay_information where PAYINFO_UID like 'market_%' group by TO_CHAR (payinfo_rdate, 'MM')
	</select>
	
	<select id="sumCor" resultType="Long" >
		select SUM(payinfo_price)from pay_information where PAYINFO_UID like 'project_%' group by TO_CHAR (payinfo_rdate, 'MM')
	</select>
	
	<select id="month" resultType="Long" >
		SELECT  TO_CHAR(payinfo_rdate, 'MM') FROM pay_information where PAYINFO_UID like 'market_%' 
		group by TO_CHAR (payinfo_rdate, 'MM')
	</select>
	
	<!-- 마켓 총 게시글 갯수 출력 -->
   <select id="getMarketCount" resultType="Long">
      SELECT COUNT(*) FROM MARKET 
   </select>
   
 <!-- 승인대기중인 마켓게시글 -->
   <select id="getMarketList" parameterType="MemberVo" resultType="Market">
       select * from (select ROWNUM rnum , aa.* from (
         select FREE_NAME , MARKET_NUM, MARKET_SUB, MARKET_STATE , MARKET_PRICE ,mem_email from FREELANCER f join MARKET m on m.FREE_CODE=f.FREE_CODE ORDER BY MARKET_NUM desc ) aa)
      <![CDATA[where rnum>#{start} and rnum<=#{end}]]>            
   </select>
   
   	<update id="upMarketS"  parameterType="Map">
		UPDATE MARKET SET MARKET_STATE=#{market_state} WHERE MARKET_NUM=#{market_num}  
	</update>
<!-- 관리자 멤버리스트  -->
	<select id="getList" parameterType="Map" resultMap="MemberMap">
	 	<![CDATA[
			 select * from (select ROWNUM rnum , aa.* from (select * from Member ]]>
			 <include refid="paging" />	
			 <include refid="search" />
			 <![CDATA[
			 	) aa)
				 where rnum>#{MemberVo.start} and rnum<=#{MemberVo.end}
	  		  ]]>
	</select>
	
	<select id="getTotalCount" parameterType="Map" resultType="long" >
		select count(MEM_EMAIL) from MEMBER 
		<include refid="paging" />
		<include refid="search" />	
	</select>
	
	<sql id="paging">
			<choose> 
			 	<when test="class_num == 4"> WHERE CLASS_NUM =#{class_num}</when>
			 	<when test="class_num == 2"> WHERE (CLASS_NUM=2 OR CLASS_NUM=3) </when>
			 	<otherwise> where CLASS_NUM>1 </otherwise>			 
			 </choose>
	
	</sql>
	<sql id="search">
		<choose>
			<when test="keyword != null and keyword != ''">
				AND (MEM_NAME LIKE '%'||#{keyword}||'%' 
				OR MEM_EMAIL LIKE '%'||#{keyword}||'%'  
				OR MEM_RDATE LIKE '%'||#{keyword}||'%') 
			</when>			
		</choose>
	</sql>
	
	<!-- 기업 마켓  -->
	<select id="marketListCor" parameterType="MemberVo" resultMap="PayInformationMap" >
	 	<![CDATA[
			 select * from (select ROWNUM rnum , aa.* from (select * from PAY_INFORMATION where PAYINFO_UID like 'project_%' ]]>
			 <include refid="searchAll" />
		<![CDATA[	
		 order by PAYINFO_RDATE desc ) aa) where rnum>#{start} and rnum<=#{end} 
	  	]]>
	</select>
	
	<select id="getTotalCountMC"  resultType="long" >
	<![CDATA[
		select count(PAYINFO_NUM) from PAY_INFORMATION where PAYINFO_UID like 'project_%'
	]]>	
		<include refid="searchAll" />
	</select>
	
	<!-- 프리랜서 마켓 -->
	<select id="marketListFree" parameterType="MemberVo" resultMap="PayInformationMap" >
	 	<![CDATA[
			 select * from (select ROWNUM rnum , aa.* from (select * from PAY_INFORMATION where PAYINFO_UID like 'market_%'  ]]>
			 <include refid="searchAll" />	
		<![CDATA[ 
			order by PAYINFO_RDATE desc ) aa) where rnum>#{start} and rnum<=#{end} 
	  	]]>
	</select>
	
	<select id="getTotalCountMF" resultType="long" >
		<![CDATA[
			select count(PAYINFO_PAYID) from PAY_INFORMATION where PAYINFO_UID like 'market_%'
		]]>		
			<include refid="searchAll" />
	</select>
	
	<!-- 결제정보 검색 -->
	<sql id="searchAll">
		<if test="type != null">
			<if test="type == 'ALL'.toString()"> 
				AND (PAYINFO_PAYID like '%'||#{keyword}||'%' OR PAYINFO_PRICE like '%'||#{keyword}||'%'
				OR PAYINFO_STATUS like '%'||#{keyword}||'%' OR PAYINFO_PGTID like '%'||#{keyword}||'%' OR PAYINFO_BUYERNAME like '%'||#{keyword}||'%')
			</if> 
			<if test="type == 'PI'.toString()"> AND PAYINFO_PAYID like '%'||#{keyword}||'%' </if> 
			<if test="type == 'P'.toString()"> AND PAYINFO_PRICE like '%'||#{keyword}||'%' </if>
			<if test="type == 'S'.toString()"> AND PAYINFO_STATUS like '%'||#{keyword}||'%' </if>
			<if test="type == 'PGI'.toString()"> AND PAYINFO_PGTID like '%'||#{keyword}||'%' </if>
			<if test="type == 'N'.toString()"> AND PAYINFO_BUYERNAME like '%'||#{keyword}||'%' </if>
		</if>
		<if test="startDate != null and endDate != null ">
			AND PAYINFO_RDATE between #{startDate} and #{endDate}
		</if>
	</sql>
 	<!--  
	<sql id="searchFree">
		<trim  prefix="(" suffix=") AND " prefixOverrides="OR" >
			<foreach collection="typeArr" item="type">
				<trim prefix="OR">
					<choose>
						<when test="type == 'PI'.toString()"> PAYINFO_PAYID like '%'||#{keyword}||'%' </when>
						
					</choose>
				</trim>
			</foreach>
		</trim>
	</sql>  -->
	

</mapper>